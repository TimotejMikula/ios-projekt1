#!/bin/bash
# xmikult00 Timotej Mikula
# 7.3.2024

# Set POSIXLY_CORRECT and LC_ALL environment variables
export POSIXLY_CORRECT=yes
export LC_ALL=C

# Check for --help before getopts
if [[ ($1 == "--help") || ($1 == "-h") ]]; then
    echo "Hint - Help."
    exit 0
fi

args=("$@")
count_of_args=$#
counter_of_args=0
IFS=$'\n'

counter_for_getopts=1
a_counter=0
b_counter=0
c_counter=0
declare -a allcurrency
declare -a currency

# Parse command-line options using getopts
while getopts ':a:b:c' opt; do
    case $opt in
        a)  date_before=${args[counter_for_getopts]}
            a_counter=$((a_counter + 1)) ;;

        b)  date_after=${args[counter_for_getopts]}
            b_counter=$((b_counter + 1)) ;;

        c)  
            echo "${arg[counter_of_args + 1]}"
            val=0
            for curr in "${currency[@]}"; do
                if [[ "${arg[counter_of_args + 1]}" == *"$curr"* ]]; then
                    val=1
                fi
            done
            if [[ $val -eq 0 ]]; then
                currency[c_counter]="${arg[counter_for_getopts+1]}"
                c_counter=$((c_counter + 1))
            fi
            ;;

        *)  echo "errror invalid flag" >&2 #echo
            exit 1 ;;
    esac
    counter_of_args=$((counter_of_args + 2))
    counter_for_getopts=$((counter_for_getopts + 2))
done

# for (( i = 0; i <= c_counter; i++ )); do
#     echo "$i = ${currency[i]}"
# done

# Check if multiple -a or -b options are provided
if [[ ($a_counter -gt 1) || ($b_counter -gt 1) ]]; then
    echo "errror multiple -a or -b options" >&2
    exit 1
fi

listcurrencyvalue=0
listvalue=0
statusvalue=0
profitvalue=0

# Check for specific arguments in the command-line arguments
for arg in "${args[@]}"; do
    case $arg in
        "list")
            listvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "list-currency")
            listcurrencyvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "status")
            statusvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "profit")
            profitvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
    esac
done

name=${args[$counter_of_args]}
if [[ ($name == "") || ($name == *.log) ]]; then
    echo "errror no name provided" >&2
    exit 1
fi
# counter_of_args=$((counter_of_args + 1))

# Store remaining arguments in the "log" array
for (( i = counter_of_args; i < count_of_args; i++ )); do
    lognum=$((i - counter_of_args + 1))
    log[lognum]=${args[$i]}
    if [[ (${log[lognum]} != *.log) && (${log[lognum]} != *.gz) ]]; then
        echo "errror invalid log file" >&2
        exit 1
    fi
done

# Process each log file
for ((i = 1; i <= ${#log[@]}; i++)); do

    # Decompress .gz files if necessary
    
    if [[ "${log[i]}" == *".gz" ]]; then
        # echo "${log[i]}"
        log[i]="$(gzip -dc "${log[i]}")"
        # echo "${log[i]}"
    fi

    # Check if log file exists and read its content
    # if [ -e "${log[i]}" ]; then 
    #     content[i]=$(cat "${log[i]}") 
    # else
    #     exit 1
    # fi

done

# echo "name: $name"
# echo "currency: ${currency[*]}"
# echo "log:\n${log[*]}"
# echo "date_before: $date_before"
# echo "date_after: $date_after"
# echo "command:\nlistcurrency: $listcurrencyvalue\nlist: $listvalue\nstatus: $statusvalue\nprofit: $profitvalue"

# Perform different actions based on the provided arguments
if [[ ((($listcurrencyvalue -eq 0) && ($listvalue -eq 0) && ($statusvalue -eq 0) && ($profitvalue -eq 0)) || ($listvalue -eq 1)) ]]; then
#     # Print lines containing the specified name


#     # for logs in "${content[@]}"; do
#     #     for line in $logs; do
#     #         for curr in "${currency[@]}"; do
#     #             if [[ $line == *"$name"* ]];then
#     #                 if [[ ${#currency[@]} -gt 0 ]]; then
#     #                     if [[ $line == *"$curr"* ]]; then
#     #                         echo "$line"
#     #                     fi
#     #                 else
#     #                     echo "$line"
#     #                 fi
#     #             fi
#     #         done
#     #     done
#     # done

    if [[ ${#currency[@]} -gt 0 ]]; then
        awk -v name="$name" -v currency="${currency[*]}" '{ if($1 == name && $2 == currency) print $0;}' "${log[@]}"
    else
        awk -v name="$name" '{ if($1 == name) print $0;}' "${log[@]}"
    fi


else
    if [[ $listcurrencyvalue -eq 1 ]]; then
#         # Print the third column of lines containing the specified name
        for logs in "${log[@]}"; do
            awk -v name="$name" '{ if($1 == name) { print $3; } }' "$logs"
#             # awk '{ if($1 == $name) print $3;}' $logs
#             # awk -v '{ if($1 == "$name") print $3;}' "$logs"
#             # awk '{print $3}' "$logs" | grep "$name"
        done
    fi
fi

exit 0