#!/bin/bash
# xmikult00 Timotej Mikula
# 7.3.2024

# Set POSIXLY_CORRECT and LC_ALL environment variables
export POSIXLY_CORRECT=yes
export LC_ALL=C

# Check for --help before getopts
if [[ ($1 == "--help") || ($1 == "-h") ]]; then
    echo "Hint - Help."
    exit 0
fi

args=("$@")
count_of_args=$#
counter_of_args=0
IFS=$'\n'

counter_for_getopts=1
a_counter=0
b_counter=0
c_counter=0
declare -a allcurrency
declare -a currency

# Parse command-line options using getopts
while getopts ':a:b:c:' opt; do
    case $opt in
        a)  
            date_before=${args[counter_for_getopts]}
            a_counter=$((a_counter + 1)) ;;

        b)  
            date_after=${args[counter_for_getopts]}
            b_counter=$((b_counter + 1)) ;;

        c)  
            val=0
            for curr in "${currency[@]}"; do
                if [[ "${args[counter_of_args + 1]}" == *"$curr"* ]]; then
                    val=1
                fi
            done
            if (( val == 0 )); then
                currency[c_counter]="${args[counter_of_args + 1]}"
                c_counter=$((c_counter + 1))
            fi
            if [[ "${#currency[c_counter - 1]}" != 3 ]]; then
                echo "errror invalid currency" >&2
                exit 1
            fi
            ;;

        *)  
            echo "errror invalid flag" >&2
            exit 1 ;;
    esac
    counter_of_args=$((counter_of_args + 2))
    counter_for_getopts=$((counter_for_getopts + 2))
done

# Check if multiple -a or -b options are provided
if (( (a_counter > 1) || (b_counter > 1) )); then
    echo "errror multiple -a or -b options" >&2
    exit 1
fi

listcurrencyvalue=0
listvalue=0
statusvalue=0
profitvalue=0

# Check for specific arguments in the command-line arguments
for arg in "${args[@]}"; do
    case $arg in
        "list")
            listvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "list-currency")
            listcurrencyvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "status")
            statusvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "profit")
            profitvalue=1
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
    esac
done

name=${args[counter_of_args]}
if [[ ($name == "") || ($name == *.log) || ($name == *" "*)]]; then
    echo "errror no name provided" >&2
    exit 1
fi

# for curr in "${currency[@]}"; do
#     echo "$curr"
# done

# for curr in "${currency[@]}"; do
#     echo "$curr"
# done

# Store remaining arguments in the "log" array
for (( i = counter_of_args + 1; i < count_of_args; i++ )); do
    lognum=$((i))
    val=0
    for log_item in "${log[@]}"; do
        if [[ ("${args[lognum]}" == *"$log_item"*) ]]; then
            val=1
            break
        fi
    done
    if (( val == 1 )); then
        break
    fi
    log[lognum]=${args[i]}
done

# Process each log file
for ((i = 1; i <= ${#log[@]}; i++)); do

    # Decompress .gz files if necessary
    
    if [[ "${log[i]}" == *".gz" ]]; then
        # echo "${log[i]}"
        log[i]="$(gzip -dc "${log[i]}")"
        # echo "${log[i]}"
    fi

    if [[ "${log[i]}" == *" "* ]]; then
        echo "errror space in log file" >&2
        exit 1
    fi

    if ((i != ${#log[@]})); then
        for ((j = i + 1; j <= ${#log[@]}; j++)); do
            if [[ "${log[i]}" == "${log[j]}" ]]; then
                break
            fi
        done
    fi

    # Check if log file exists and read its content
    # if [ -e "${log[i]}" ]; then 
    #     content[i]=$(cat "${log[i]}")
    #     # echo "${content[i]}"
    # else
    #     echo "errror log file does not exist exit 1" >&2
    #     exit 1
    # fi

done

# echo "name: $name"
# echo "currency: ${currency[*]}"
# echo "log: ${log[*]}"
# echo "date_before: $date_before"
# echo "date_after: $date_after"
# echo "command:\nlistcurrency: $listcurrencyvalue\nlist: $listvalue\nstatus: $statusvalue\nprofit: $profitvalue"

# Perform different actions based on the provided arguments
if (( ( listcurrencyvalue == 0 && listvalue == 0 && statusvalue == 0 && profitvalue == 0 ) || (listvalue == 1) )); then
#     # Print lines containing the specified name
    
    if (( ${#currency[@]} > 0 )); then
        for logs in "${log[@]}"; do
            for curr in "${currency[@]}"; do
                awk -F";" -v name="$name" -v currency="$curr" '{ if (($1 == name) && ($3 == currency)) print $0; }' "$logs"
            done
        done
    else
        for logs in "${log[@]}"; do
            awk -F";" -v name="$name" '{ if ($1 == name) print $0; }' "$logs"
        done
    fi
else
    if (( listcurrencyvalue == 1 )); then
        # Print the third column of lines containing the specified name
        # for logs in "${log[@]}"; do
        #     awk -F ";" '{ if ($1 == "$name") print $3; }' "$logs"
        # done

        for logs in "${log[@]}"; do
            if (( ${#allcurrency[@]} > 0 )); then
                for curr in "${allcurrency[@]}"; do
                    cur="$(awk -F ";" '{ if (($1 == "$name") && ($3 != "$curr")) print $3; }' "$logs")"
                done
            else
                cur="$(awk -F ";" '{ if ($1 == "$name") print $3; }' "$logs")"
            fi
            if (( ${#cur} != 3 )); then
                exit 1
            fi
            # for curr in "${allcurrency[@]}"; do
            #     # awk -v name="$name" -v currency="$curr" '{ if ($0 ~ name && $0 ~ currency) print $3; }' "$logs"
            #     cur="$(awk -F ";" '{ if (($1 == "$name") && ($3 == "$curr")) print $3; }' "$logs")"
            #     if [[ "$curr" == "$cur" ]]; then
            #         echo "$cur"
            #     fi
            # done
        done


        for curr in "${allcurrency[@]}"; do
            echo "$curr"
        done

        # sort "${currency[@]}"

        # for curr in "${currency[@]}"; do
        #     echo "$curr"
        # done
    fi
fi

exit 0