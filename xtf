#!/bin/bash
# xmikult00 Timotej Mikula
# 16.3.2024

# Set POSIXLY_CORRECT and LC_ALL environment variables
export POSIXLY_CORRECT=yes
export LC_ALL=C

set -e #exit immidiately if a command exits with a non-zero status

# Check for --help before getopts
if [[ ($1 == "--help") || ($1 == "-h") ]]; then
    echo "Usage: ./xtf [-a date] [-b date] [-c currency] [list|list-currency|status|profit] name [log [log ...]]"
    exit 0
fi

args=("$@")
count_of_args=$#
counter_of_args=0
IFS=$'\n'

counter_for_getopts=1
a_counter=0
b_counter=0
c_counter=0

# Parse command-line options using getopts
while getopts ':a:b:c:' opt; do
    case $opt in
        a)  
            # Check if the date is in the correct format
            date_after=${args[counter_for_getopts]}
            if [[ ! $(date -d "$date_after" +"%Y-%m-%d %H:%M:%S") ]]; then
                echo "error invalid date" >&2
                exit 1
            fi
            a_counter=$((a_counter + 1)) ;;
            
        b)  
            # Check if the date is in the correct format
            date_before=${args[counter_for_getopts]}
            if [[ ! $(date -d "$date_before" +"%Y-%m-%d %H:%M:%S") ]]; then
                echo "error invalid date" >&2
                exit 1
            fi
            b_counter=$((b_counter + 1)) ;;

        c)
            # Check if the currency is in the correct format
            currency="${args[counter_of_args + 1]}"
            c_counter=$((c_counter + 1))
                
            if [[ ${#currency} -ne 3 ]]; then
                echo "error invalid currency length" >&2
                exit 1
            fi
            ;;
        *)  
            # If the flag is not valid, print an error message and exit
            echo "errror invalid flag" >&2
            exit 1 ;;
    esac
    counter_of_args=$((counter_of_args + 2))
    counter_for_getopts=$((counter_for_getopts + 1))
done

# Check for multiple arguments
if (( a_counter > 1 || b_counter > 1 || c_counter > 1 )); then
    echo "error multiple arguments" >&2
    exit 1
fi

listcurrencyvalue=0
listvalue=0
statusvalue=0
profitvalue=0

# Check for specific arguments in the command-line arguments
for arg in "${args[@]}"; do
    case $arg in
        "list")
            listvalue=$((listvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "list-currency")
            listcurrencyvalue=$((listcurrencyvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "status")
            statusvalue=$((statusvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "profit")
            profitvalue=$((profitvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
    esac
done

# Check for multiple arguments
if (( listcurrencyvalue > 1 || listvalue > 1 || statusvalue > 1 || profitvalue > 1 )); then
    echo "error multiple arguments" >&2
    exit 1
fi


name=${args[counter_of_args]}
# Check for invalid name
if [[ ($name == "") || ($name == *.log) || ($name == *" "*) || ($name == "status") || ($name == "list-currency") || ($name == "status") || ($name == "profit")]]; then
    echo "error no name provided" >&2
    exit 1
fi

lognum=1
# Store remaining arguments in the "log" array
for (( i = counter_of_args + 1; i < count_of_args; i++ )); do
    if [[ ! -f "${args[i]}" ]]; then
        echo "error file ${args[i]} does not exist" >&2
        exit 1
    else
        log[lognum]=${args[i]}
        lognum=$((lognum + 1))
    fi
done

{
# Process each log file
for (( i = 1; i <= ${#log[@]}; i++ )); do
    
    # Decompress .gz files if necessary
    if [[ "${log[i]}" =~ \.gz$ ]]; then
        gunzip -c "${log[i]}" | awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ($1 ~ /^[^;]+$/) && (date -d $2 +"%Y-%m-%d %H:%M:%S") && ($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) && (length($3) == 3) && ($4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/)); else {exit 1;} }' 
        gunzip -c "${log[i]}"
    else
        cat "${log[i]}" | awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ($1 ~ /^[^;]+$/) && (date -d $2 +"%Y-%m-%d %H:%M:%S") && ($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) && (length($3) == 3) && ($4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/)); else {exit 1;} }'
        cat "${log[i]}"
    fi
done
} |
# filter the output based on the provided arguments
for (( i = 1; i <= ${#log[@]}; i++ )); do
    {
        awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ( $1 ~ /^[^;]+$/ ) && ( date -d $2 +"%Y-%m-%d %H:%M:%S" ) && ( $2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/ ) && ( length($3) == 3 ) && ( $4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/ )) print $0; else {exit 1;} }'
    } |

    
    {
        awk -F";" -v name="$name" '{ if ($1 == name) print $0; }'
    } |
    {
        if [[ -n "$date_before" && -n "$date_after" ]]; then
            awk -F";" -v date_before="$date_before" -v date_after="$date_after" '{ if ( ( $2 > date_after ) || ( $2 < date_before ) ) print $0; }' |
            awk -F";" -v date_before="$date_before" '{ if ( $2 != date_before ) print $0; }' |
            awk -F";" -v date_after="$date_after" '{ if ( $2 != date_after ) print $0; }'
        fi

        if [[ -n "$date_before" && -z "$date_after" ]]; then
            awk -F";" -v date_before="$date_before" '{ if ( $2 < date_before ) print $0; }' |
            awk -F";" -v date_before="$date_before" '{ if ( $2 != date_before ) print $0; }'
        fi

        if [[ -z "$date_before" && -n "$date_after" ]]; then
            awk -F";" -v date_after="$date_after" '{ if ( $2 > date_after ) print $0; }' |
            awk -F";" -v date_after="$date_after" '{ if ( $2 != date_after ) print $0; }'
        fi

        if [[ -z "$date_before" && -z "$date_after" ]]; then
            awk -F";" '{ print $0; }'
        fi
    } |
    {
        if [[ -n "$currency" ]]; then
            awk -F";" -v currency="$currency" '{ if ($3 == currency) print $0; }'
        else
            awk -F";" '{ print $0; }'
        fi
    } |
    {
    # Perform different actions based on the provided arguments
    if (( ( listcurrencyvalue == 0 && listvalue == 0 && statusvalue == 0 && profitvalue == 0 ) || (listvalue == 1) )); then
        awk -F";" '{ print $0; }'

    elif (( listcurrencyvalue == 1 )); then
        awk -F";" '{ print $3; }' | sort -u 

    elif (( statusvalue == 1 )); then 
        awk -F";" '{ values[$3] += $4 } END { for (val in values) printf "%s : %.4f\n", val, values[val] }' | sort

    elif (( profitvalue == 1 )); then
        awk -F";" -v profit="${XTF_PROFIT:-20}" '{ count[$3]+=$4 } END { for (val in count) {if (count[val] > 0) {count[val]*=((100+profit)/100)} printf "%s : %.4f\n", val, count[val]} }' | sort
        
    else
        echo "error invalid arguments" >&2
        exit 1
    fi
    }
done

exit 0