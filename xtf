#!/bin/bash
# xmikult00 Timotej Mikula
# 7.3.2024

# Set POSIXLY_CORRECT and LC_ALL environment variables
export POSIXLY_CORRECT=yes
export LC_ALL=C
set -e #exit immidiately if a command exits with a non-zero status

# Check for --help before getopts
if [[ ($1 == "--help") || ($1 == "-h") ]]; then
    echo "Hint - Help."
    exit 0
fi

args=("$@")
count_of_args=$#
counter_of_args=0
IFS=$'\n'

counter_for_getopts=1
a_counter=0
b_counter=0
c_counter=0

# declare -a currency

# Parse command-line options using getopts
while getopts ':a:b:c:' opt; do
    case $opt in
        a)  
            if [[ $date_after != "" ]]; then
                echo "errror multiple -b options" >&2
                exit 1
            fi
            # echo "date_after: ${args[counter_for_getopts]}"
            date_after=${args[counter_for_getopts]}
            if [[ -n "$date_after" ]]; then
                if (! (date -d "$date_after" +"%Y-%M-%D %H:%M:%S" >/dev/null 2>&1)); then
                    echo "error invalid datetime format for date_after" >&2
                    exit 1
                    # echo "$date_after"
                fi
            fi
            a_counter=$((a_counter + 1)) ;;
            
        b)  
            if [[ $date_before != "" ]]; then
                echo "errror multiple -a options" >&2
                exit 1
            fi
            # echo "date_before: ${args[counter_for_getopts]}"
            date_before=${args[counter_for_getopts]}
            # Validate datetime format
            if [[ -n "$date_before" ]]; then
                if (! (date -d "$date_before" +"%Y-%m-%d %H:%M:%S" >/dev/null 2>&1)); then
                    echo "error invalid datetime format for date_before" >&2
                    exit 1
                    # echo "$date_before"
                fi
            fi
            b_counter=$((b_counter + 1)) ;;

        c)  
            if [[ $currency != "" ]]; then
                echo "errror multiple -c options" >&2
                exit 1
            fi
            
            currency="${args[counter_of_args + 1]}"
            c_counter=$((c_counter + 1))
                
            if [[ ${#currency} -ne 3 ]]; then
                echo "error invalid currency length" >&2
                exit 1
            fi
            ;;
        *)  
            echo "errror invalid flag" >&2
            exit 1 ;;
    esac
    counter_of_args=$((counter_of_args + 2))
    counter_for_getopts=$((counter_for_getopts + 1))
done

listcurrencyvalue=0
listvalue=0
statusvalue=0
profitvalue=0

# Check for specific arguments in the command-line arguments
for arg in "${args[@]}"; do
    case $arg in
        "list")
            listvalue=$((listvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "list-currency")
            listcurrencyvalue=$((listcurrencyvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "status")
            statusvalue=$((statusvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
        "profit")
            profitvalue=$((profitvalue + 1))
            counter_of_args=$((counter_of_args + 1))
            break
            ;;
    esac
done

if (( listcurrencyvalue > 1 || listvalue > 1 || statusvalue > 1 || profitvalue > 1 )); then
    echo "error multiple arguments" >&2
    exit 1
fi

# if [ "$(date -d "$date_after" +%s)" -lt "$(date -d "$date_before" +%s)" ]; then
#     echo "error date_after is earlier than date_before" >&2
#     exit 1
# fi

name=${args[counter_of_args]}
if [[ ($name == "") || ($name == *.log) || ($name == *" "*) || ($name == "status") || ($name == "list-currency") || ($name == "status") || ($name == "profit")]]; then
    echo "error no name provided" >&2
    exit 1
fi

lognum=1
# Store remaining arguments in the "log" array
for (( i = counter_of_args + 1; i < count_of_args; i++ )); do
    if [[ ! -f "${args[i]}" ]]; then
        echo "error file ${args[i]} does not exist" >&2
        exit 1
    else
        log[lognum]=${args[i]}
        # echo "$lognum = ${log[lognum]}"
        lognum=$((lognum + 1))
    fi
done

# echo "name: $name"
# echo "currency: ${currency[*]}"
# echo "log: ${log[*]}"
# echo "date_before: $date_before"
# echo "date_after: $date_after"
# echo "command:\nlistcurrency: $listcurrencyvalue\nlist: $listvalue\nstatus: $statusvalue\nprofit: $profitvalue"


# Process each log file
for (( i = 1; i <= ${#log[@]}; i++ )); do
    {
    # Decompress .gz files if necessary
    if [[ "${log[i]}" =~ \.gz$ ]]; then
        # echo "${log[i]}"
        gunzip -c "${log[i]}" | awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ($1 ~ /^[^;]+$/) && (date -d $2 +"%Y-%m-%d %H:%M:%S") && ($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) && (length($3) == 3) && ($4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/)); else {exit 1;} }' 
        gunzip -c "${log[i]}"
    else
        # echo "${log[i]}"
        cat "${log[i]}" | awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ($1 ~ /^[^;]+$/) && (date -d $2 +"%Y-%m-%d %H:%M:%S") && ($2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) && (length($3) == 3) && ($4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/)); else {exit 1;} }'
        cat "${log[i]}"
    fi
    } |

    {
        awk -F";" '{if (( $0 ~ /^[^;]+;[^;]+;[A-Z]{3};[+-]?[0-9]+([.][0-9]+)?$/ ) && ( $1 ~ /^[^;]+$/ ) && ( date -d $2 +"%Y-%m-%d %H:%M:%S" ) && ( $2 ~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/ ) && ( length($3) == 3 ) && ( $4 ~ /^[+-]?[0-9]+([.][0-9]+)?$/ )) print $0; else {exit 1;} }'
    } |

    {
    # Perform different actions based on the provided arguments
    if (( ( listcurrencyvalue == 0 && listvalue == 0 && statusvalue == 0 && profitvalue == 0 ) || (listvalue == 1) )); then
        # Print lines containing the specified name
        # for logs in "${log[@]}"; do
            if [[ -n "$currency" ]]; then
                if [[ (-n "$date_before") && (-n "$date_after") ]]; then
                    awk -F";" -v name="$name" -v currency="$currency" -v date_before="$(date -d "$date_before" +"%Y-%m-%d %H:%M:%S")" -v date_after="$(date -d "$date_after" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($3 == currency) && ($2 >= date_before) && ($2 <= date_after)) print $0; }' 
                elif [[ -n "$date_before" ]]; then
                    awk -F";" -v name="$name" -v currency="$currency" -v date_before="$(date -d "$date_before" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($3 == currency) && ($2 >= date_before)) print $0; }' 
                elif [[ -n "$date_after" ]]; then
                    awk -F";" -v name="$name" -v currency="$currency" -v date_after="$(date -d "$date_after" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($3 == currency) && ($2 <= date_after)) print $0; }' 
                else
                    awk -F";" -v name="$name" -v currency="$currency" '{ if (($1 == name) && ($3 ~ currency)) print $0; }' 
                fi
            else
                if [[ (-n "$date_before") && (-n "$date_after") ]]; then
                    awk -F";" -v name="$name" -v date_before="$(date -d "$date_before" +"%Y-%m-%d %H:%M:%S")" -v date_after="$(date -d "$date_after" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($2 >= date_before) && ($2 <= date_after)) print $0; }'
                elif [[ -n "$date_before" ]]; then
                    awk -F";" -v name="$name" -v date_before="$(date -d "$date_before" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($2 >= date_before)) print $0; }'
                elif [[ -n "$date_after" ]]; then
                    awk -F";" -v name="$name" -v date_after="$(date -d "$date_after" +"%Y-%m-%d %H:%M:%S")" '{ if (($1 == name) && ($2 <= date_after)) print $0; }'
                else
                    awk -F";" -v name="$name" '{ if ($1 == name) print $0; }' 
                fi
            fi
        # done

    elif (( listcurrencyvalue == 1 )); then
        # Print the third column of lines containing the specified name
        awk -F";" -v name="$name" '{ if ($1 == name) print $3; }' | sort -u 
    elif (( statusvalue == 1 )); then

        # declare -A status_currency

        # if [[ -n "$currency" ]]; then
        #     awk -F";" -v name="$name" -v status_currency="${status_currency[*]}" -v currency="$currency" '{ if ($1 == name) {if ($3 == currency) {((status_currency[$3]+=$4));}}}' 
        # else
        #     awk -F";" -v name="$name" -v status_currency="${status_currency[*]}" '{ if ($1 == name) {if ($3 ~ status_currency) {((status_currency[$3]+=$4));}}}'
        # fi

        # for key in "${!status_currency[@]}"; do
        #     echo "$key : ${status_currency[key]}"
        # done

        declare status_currency
        declare currency_value

        if [[ -n "$currency" ]]; then
            awk -F";" -v name="$name" -v status_currency="${status_currency[*]}" -v currency="$currency" -v currency_value="${currency_value[*]}" '{ if ($1 == name) {if ($3 == currency) {((status_currency[0]=$currency)); ((currency_value[0]+=$4)));}}' 
        else
            awk -F";" -v name="$name" -v status_currency="${status_currency[*]}" '{ if ($1 == name) {if ($3 ~ status_currency) {((status_currency[$3]+=$4));}}}'
        fi

        for (( j = 0; j < ${#status_currency[@]}; j++ )); do
            echo "${status_currency[j]} : ${currency_value[j]}"
        done

    elif (( profitvalue == 1 )); then

        # declare -A profit_currency

        # if [[ -n "$currency" ]]; then
        #     awk -F";" -v name="$name" -v profit_currency="${profit_currency[*]}" -v currency="$currency" '{ if ($1 == name) {if ($3 == currency) {((profit_currency[$3]+=$4));}}}'
        # else
        #     awk -F";" -v name="$name" -v profit_currency="${profit_currency[*]}" '{ if ($1 == name) {if ($3 =~ profit_currency) {((profit_currency[$3]+=$4));}}}'
        # fi

        # for key in "${!profit_currency[@]}"; do
        #     value=${profit_currency[key]}
        #     if (( value > 0 )); then
        #         value=$(echo "$value * 1.2" | bc)
        #         echo "$key : $value"
        #     else
        #         echo "$key : $value"
        #     fi
        # done

        # declare profit_currency
        # declare currency_value

        profit_currency=()
        currency_value=()

        if [[ -n "$currency" ]]; then
            awk -F";" -v name="$name" -v profit_currency="${profit_currency[*]}" -v currency="$currency" -v currency_value="${currency_value[*]}" '{ if ($1 == name) {if ($3 == currency) {((profit_currency[0]=$4)); ((currency_value[0]+=$4));}}}' 
        else
            awk -F";" -v name="$name" -v profit_currency="${profit_currency[*]}" '{ if ($1 == name) {if ($3 ~ profit_currency) { (( profit_currency[]+=$4 )); (( currency_value[]+=$4 ));}}}'
        fi

        for (( j = 0 ; j < ${#profit_currency[@]} ; j++ )); do
            if (( currency_value[j] > 0 )); then
                currency_value[j]=$(echo "${currency_value[j]} * 1.2" | bc)
                echo "${profit_currency[j]} : ${currency_value[j]}"
            else
                echo "${profit_currency[j]} : ${currency_value[j]}"
            fi
        done

    else
        echo "error invalid arguments" >&2
        exit 1
    fi
    }
done

exit 0